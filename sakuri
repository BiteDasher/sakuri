#!/bin/bash
DIR="$HOME/.config/sakuridir"
DIRR="$HOME/.config/sakuridir/gitpool"
UPDCHK="$HOME/.config/sakuridir/updchk"
UPDALL="$HOME/.config/sakuridir/updall"
IGN="$HOME/.config/sakuridir/ignore"
CONFDIR="$HOME/.config"
tlock() {
touch ${DIR}/.db.lock
}
rmlock() {
rm -f ${DIR}/.db.lock
}
chlock() {
if [ -f ${DIR}/.db.lock ]; then echo -e "\033[1;31mSakuri is already running.\033[0m \nIf you are sure that this is a mistake, or you have forcibly completed the process, enter \033[0;33msakuri dbremove\033[0m to delete the lock file" ; exit 1; fi
}
trapcom() {
if [ -n "$(ls ${DIR}/*/.00* 2>/dev/null)" ]; then
rm ${DIR}/*/.00*
fi
echo " "
echo -e "\033[1;31mInterrupt signal recieved\033[0m"
rmlock
unset SAKURIE
exit 1
}
if ! [ -d "${CONFDIR}" ]; then mkdir ~/.config; fi
if ! [ -d "${DIR}" ]; then mkdir ~/.config/sakuridir; fi
if ! [ -d "${DIRR}" ]; then mkdir -p ~/.config/sakuridir/gitpool; fi
if ! [ -d "$UPDCHK" ]; then mkdir -p ~/.config/sakuridir/updchk; fi
if ! [ -d "$UPDALL" ]; then mkdir -p ~/.config/sakuridir/updall; fi
if ! [ -d "$IGN" ]; then mkdir -p ~/.config/sakuridir/ignore; fi
PKG=$2
GITDIR=.git
installerror="\033[0;31mIt seems like after makepkg command something went wrong. Please check logs of pacman and try again.\033[0m"
rm -rf ${DIRR}/.git
if [ -f "${DIR}/.info2" ]; then rm ${DIR}/.info2; fi
trap trapcom SIGTERM
trap trapcom SIGINT
case "$1" in
        i)
		chlock
		tlock
		count=0
                if [ -z "$2" ]; then echo "Write what you need to install"; rmlock; exit 1; fi
		for PKG in ${@:2}
		do
		count=$((count+1))
		ANSWER=YES
                cd ${DIR}
                if [ -d "${PKG}" ]
                then
			if (( $count > 1 )); then
			echo -e "\033[0;32m(Reinstall/update package?)\033[0m You already have a cache of ${PKG} package. Remove it? [y/n]"
				else
                        echo "You already have a cache of ${PKG} package. Remove it? [y/n]"
			fi
                        read q
                if [ $q == y ] &> /dev/null
                then
                        rm -rf ${PKG}
			ANSWER=YES
                else
                        echo "Try next time"
                        ANSWER=NO
                fi
	fi
		if [ -f "${IGN}/${PKG}" ]
		then
			echo "You are ignored ${PKG} package. Remove it from ignore list? [y/n]"
			read q3
		if [ $q3 == y ] &> /dev/null
		then
			rm -rf ${IGN}/${PKG}
			ANSWER=YES
		else
			echo "Try next time"
			ANSWER=NO
		fi
	fi
		if [ $ANSWER ]; then
		case $ANSWER in
		NO)
		true
		;;
		YES)
		git clone https://aur.archlinux.org/${PKG}.git
		if ! [ -d "${DIR}/${PKG}" ]; then
		echo -e "\033[0;31mIt seems like you doesn't have internet connection or package doesn't exists.\033[0m"
		rmlock
		exit 3
		fi
                mv ${PKG}/${GITDIR} ${DIRR}
                if [ -z "$(ls -A ${PKG})" ]
                then
                        echo "Empty dir, removing."
                        rm -rf ${PKG}
                        rm -rf ${DIRR}/${GITDIR}
                else
                        mv ${DIRR}/${GITDIR} ${PKG}
                        cd ${PKG}
			source PKGBUILD
                        pacman -Ssq | sort > .00PRESYNC
			pacman -Qsq | sort >> .00PRESYNC
			sort -u .00PRESYNC > .00SYNC
			rm .00PRESYNC
			if [[ -z "${depends[@]}" ]]; then true; else
                        echo ${depends[@]} | tr ' ' '\n' | sort | cut -d "<" -f 1 | cut -d ">" -f 1 | cut -d "=" -f 1 > .00AUR
			fi
			if [[ -z "${makedepends[@]}" ]]; then true; else
                        echo ${makedepends[@]} | tr ' ' '\n' | sort | cut -d "<" -f 1 | cut -d ">" -f 1 | cut -d "=" -f 1 >> .00AUR
			fi
			if [ -f \.00AUR ]; then true; else touch \.00AUR; fi
                        sort -u .00AUR > .00AUR2
                        rm .00AUR
                        mv .00AUR2 .00AUR
                        diff .00SYNC .00AUR | grep -e ">" | cut -d" " -f2 > .00RESULT
                        if [ -z "$(cat .00RESULT)" ]; then true; else
			echo "----------------"
			cat .00RESULT
                        echo -e "\033[0;31mIt seems that package you tries to install has AUR dependencies. Install them? [y/n]\033[0m"
			read alphaq
			if [ $alphaq == y ] &> /dev/null
			then
				true
			else
				rm ${DIR}/*/.00* 2>/dev/null
				rmlock
				exit 2
			fi
                        echo "----------------"
                        for aurd in `cat .00RESULT`
                        do
				if [ -z "$(pacman -Qsq | grep -x $aurd)" ]; then
                                sakuri i $aurd
                        else
				echo -e "\033[1;32m${aurd}\033[0m already installed, \033[1;36mskipping...\033[0m"
				fi
                        done
			fi
                        makepkg -sir ||
			{
			echo -e $installerror
			rm ${DIR}/*/.00*
			rmlock
			exit 4
			}
			fi
                	;;
		esac
		fi
	done
			rmlock
			;;
	ia)
		chlock
		tlock
		if [ -z $2 ]; then echo "Write what you need to install again"; rmlock; exit 1; fi
		ANSWER=YES
		for PKG in ${@:2}
		do
		if [ -d "${DIR}/${PKG}" ]
		then
			ANSWER=YES
		else
			echo "Package directory of ${PKG} doesn't exists."
			ANSWER=NO
		fi
		if [ -f "${IGN}/${PKG}" ]
		then
			echo "You are ignored ${PKG} package. Remove it from ignore list? [y/n]"
			read q33
		if [ $q33 == y ] &> /dev/null
		then
			rm ${IGN}/${PKG}
			ANSWER=YES
		else
			echo "Try next time"
			ANSWER=NO
		fi
	fi
		if [ $ANSWER ]; then
		case $ANSWER in
		NO)
		true
		;;
		YES)
			cd ${DIR}/${PKG}
			source PKGBUILD
                        pacman -Ssq | sort > .00PRESYNC
			pacman -Qsq | sort >> .00PRESYNC
			sort -u .00PRESYNC > .00SYNC
			rm .00PRESYNC
			if [[ -z "${depends[@]}" ]]; then true; else
                        echo ${depends[@]} | tr ' ' '\n' | sort | cut -d "<" -f 1 | cut -d ">" -f 1 | cut -d "=" -f 1 > .00AUR
			fi
			if [[ -z "${makedepends[@]}" ]]; then true; else
                        echo ${makedepends[@]} | tr ' ' '\n' | sort | cut -d "<" -f 1 | cut -d ">" -f 1 | cut -d "=" -f 1 >> .00AUR
			fi
			if [ -f \.00AUR ]; then true; else touch \.00AUR; fi
                        sort -u .00AUR > .00AUR2
                        rm .00AUR
                        mv .00AUR2 .00AUR
                        diff .00SYNC .00AUR | grep -e ">" | cut -d" " -f2 > .00RESULT
                        if [ -z "$(cat .00RESULT)" ]; then true; else
			echo "----------------"
			cat .00RESULT
                        echo -e "\033[0;31mIt seems that package you tries to install has AUR dependencies. Install them? [y/n]\033[0m"
			read alphaq
			if [ $alphaq == y ] &> /dev/null
			then
				true
			else
				rm ${DIR}/*/.00* 2>/dev/null
				rmlock
				exit 2
			fi
                        echo "----------------"
                        for aurd in `cat .00RESULT`
                        do
                                if [ -z "$(pacman -Qsq | grep -x $aurd)" ]; then
                                sakuri i $aurd
                        else
				echo -e "\033[1;32m${aurd}\033[0m already installed, \033[1;36mskipping...\033[0m"
				fi
                        done
			fi
			makepkg -sir ||
			{
			echo -e $installerror
			rm ${DIR}/*/.00*
			rmlock
			exit 4
			}
			;;
	esac
			fi
		done
			;;
	--back-ia--)
		if [ -z $2 ]; then echo "Write what you need to install again"; exit 1; fi
		if [ -z "$(pacman -Qsq | grep -x ${PKG})" ]; then echo "Package ${PKG} doesn't exists."; fi
		cd ${DIR}/${PKG}
			makepkg -sir ||
			echo -e $installerror
			echo " "
			;;
        r)
		chlock
		tlock
                if [ -z "$2" ]; then echo "Write what you need to remove"; rmlock; exit 1; fi
		cat /dev/null > ${DIR}/.info
		for PKG in ${@:2}
		do
		if [ -f "${IGN}/${PKG}" ]
		then
			echo "You are ignored ${PKG} package. By deleting this package, you also will delete information about it in ignore list. Continue? [y/n]"
			read q4
			if [ $q4 == y ] &> /dev/null
			then
				echo ${PKG} >> ${DIR}/.info2
			fi
		else
		echo ${PKG} >> ${DIR}/.info
		fi
		done
		if [ -f ${DIR}/.info2 ]; then
		tr "\n" " " < ${DIR}/.info2 >> ${DIR}/.info
		fi
		sort -u ${DIR}/.info > ${DIR}/.info2
                sudo pacman -Rns $(cat ${DIR}/.info2)
		for PKGR in ${@:2}
		do
		if [ -n "$(pacman -Qsq | grep -x ${PKGR})" ]; then
                echo -e "Package \033[0;33m${PKGR}\033[0m wasn't uninstalled."
        else
                for PKGDIR in $(cat ${DIR}/.info2)
                do
                if [ -d ${IGN}/${PKGDIR} ]; then
                rm -rf ${IGN}/${PKGR}
                fi
                done
                fi
                done
                rm ${DIR}/.info2
                cat /dev/null > ${DIR}/.info
		rmlock
                ;;
--back-i--)
                cd ${DIR}
                if [ -d "${PKG}" ]; then rm -rf ${PKG}; fi
		git clone https://aur.archlinux.org/${PKG}.git
		if ! [ -d "${DIR}/${PKG}" ]
		then
			echo -e "\033[0;31mIt seems like you doesn't have internet connection or package doesn't exists.\033[0m"
			exit 3
		fi
                mv ${PKG}/${GITDIR} ${DIRR}
                if [ -z "$(ls -A ${PKG})" ]
                then
                        echo "Empty dir, removing."
                        rm -rf ${PKG}
                        rm -rf ${DIRR}/${GITDIR}
			echo " "
                else
                        mv ${DIRR}/${GITDIR} ${PKG}
                        cd ${PKG}
                        makepkg -sir --noconfirm ||
			{
			echo -e $installerror
			export SAKURIE=1
			echo error > ${DIR}/.uu7
			}
			echo " "
		fi
                ;;
        ch)
		chlock
		tlock
                cd ${UPDCHK}
                if [ -z "$2" ]; then echo "Write what you need to check"; rmlock; exit 1; fi
		for PKG in ${@:2}
		do
		if [ -d "${IGN}/${PKG}" ]
		then
			echo "You have ignored ${PKG} package. Check it? [y/n]"
			read qqq
			if [ $qqq == y ] &> /dev/null
			then
			echo "${PKG}" >> ${DIR}/.info2
			else
			rmlock
			exit 2
			fi
		fi
		if [ -z "$(pacman -Qsq | grep -x ${PKG})" ]
                                then
				echo "---------------------------"
                                echo "Package ${PKG} doesn't exists, or you doesn't have information about it in registry"
				rmlock
                                exit 1 
                        fi
                        rm -rf ./*
                        if [ -f ${DIR}/.tmptmptmpsakuri ]
				then
			rm ${DIR}/.tmptmptmpsakuri
				else
			touch ${DIR}/.tmptmptmpsakuri
			fi
                        git clone https://aur.archlinux.org/${PKG}.git > ${DIR}/.tmptmptmpsakuri 2>&1
			if cat ${DIR}/.tmptmptmpsakuri | grep "Could not resolve host" &> /dev/null
			then
				echo -e "\033[0;31mIt seems like you doesn't have internet connection.\033[0m"
				rm ${DIR}/.tmptmptmpsakuri
				if [ -f ${DIR}/.info2 ]
				then
				rm ${DIR}/.info2
				fi
				rmlock
				exit 3
			else
			if cat ${DIR}/.tmptmptmpsakuri | grep warning &> /dev/null
			then
				echo -e "\033[0;31mIt seems like repository of ${PKG} package not found. Try to check it on AUR, or remove it by hand for get rid of this message.\033[0m"
				rm ${DIR}/.tmptmptmpsakuri
				if [ -f ${DIR}/.info2 ]
				then
				rm ${DIR}/.info2
				fi
				rmlock
				exit 3
			fi
			fi
                        cd ${PKG}
			source PKGBUILD
			if [ -n "${epoch}" ]; then
                        APP1=${epoch}:${pkgver}-${pkgrel}
		else
			APP1=${pkgver}-${pkgrel}
			fi
			unset pkgver pkgrel epoch
                        APP2=$(pacman -Qm ${PKG} | awk '{print $2;}')
                        if [ $APP1 == $APP2 ]
                        then
                                echo "---------------------------"
                                echo "Package ${PKG} doesn't get new update."
                                echo "---------------------------"
                                echo "Current version: ${APP2}"
                        else
                                echo "---------------------------"
                                echo "Package ${PKG} has an update! ${APP1}"
                                echo "---------------------------"
                                echo "Current version: ${APP2}"
                        fi
	if [ -f ${DIR}/.info2 ]
	then
		rm ${DIR}/.info2
	fi
        rm -rf ${UPDCHK}/*
	rm ${DIR}/.tmptmptmpsakuri
		done
		rmlock
                ;;
	cha)
		chlock
		tlock
                if [ -n "$2" ]; then rmlock; exit 1; fi
		if [ -n "$(ls -A ${UPDALL})" ]; then rm -rf ${UPDALL}/* ; fi
                ffile="${DIR}/.info"
                cd ~
		if ! [ -f "${ffile}" ]; then touch ${DIR}/.info; fi
		if [ -n "$(cat ${ffile})" ]; then cat /dev/null > ${ffile}; fi
		if [ -n "$(ls -A ${IGN})" ]
		then
			echo "Following packages will NOT be checked for updates:
$(ls -A ${IGN})
---------------"
		fi
                if [ -z "$(pacman -Qmq)" ]; then echo "There is nothing to do."; rmlock; exit 1; fi
                cd ${UPDALL}
		touch $(pacman -Qmq)
		if [ -n "$(ls ${IGN})" ]; then
		rm -f $(ls ${IGN}); fi
                for D in ./*
                do
                        D=${D%*/}
                        rm -rf $D
			echo "checking ${D##*/}..."
			if [ -f ${DIR}/.tmptmptmpsakuri ]; then rm ${DIR}/.tmptmptmpsakuri; else touch ${DIR}/.tmptmptmpsakuri; fi
                        git clone https://aur.archlinux.org/${D##*/}.git > ${DIR}/.tmptmptmpsakuri 2>&1
			if cat ${DIR}/.tmptmptmpsakuri | grep "Could not resolve host" &> /dev/null
			then
				echo -e "\033[0;31mIt seems like you doesn't have internet connection.\033[0m"
				rm ${DIR}/.tmptmptmpsakuri
				rmlock
				exit 3
			else
			if cat ${DIR}/.tmptmptmpsakuri | grep warning &> /dev/null
			then
				echo -e "\033[0;31mIt seems like repository of ${D##*/} package not found. Try to check it on AUR, or add it to ignore list for get rid of this message.\033[0m"
				rm ${DIR}/.tmptmptmpsakuri
				rmlock
				exit 3
			fi
			fi
                        cd $D
			source PKGBUILD
			if [ -n "$epoch" ]; then
                        APP1=${epoch}:${pkgver}-${pkgrel}
		else
			APP1=${pkgver}-${pkgrel}
			fi
			unset pkgver pkgrel epoch
                        APP2=$(pacman -Q ${D##*/} | awk '{print $2;}')
                        if [ $APP1 == $APP2 ]
                        then
                                true
                        else
                                echo "${D} > ${APP1}" | cut -c3-100 >> ${DIR}/.info
                        fi
			rm ${DIR}/.tmptmptmpsakuri
                done
                        echo "----------------"
                        cd ~
                        if [ -z "$(cat ${ffile})" ]
                        then
                                echo "Nothing to update"
				rm -rf ${UPDALL}/*
				rmlock
                                exit 1
                        fi
                        cat ${DIR}/.info
                        cat /dev/null > ${DIR}/.info
                        rm -rf ${UPDALL}/*
			rmlock
                ;;
        l)
                pacman -Qmq
                ;;
        c)
                echo "Clean all cache? [y/n]"
                read input
                if [ $input == y ] &> /dev/null
                then
                        rm -rf ${DIR}/*
                else
                if [ $input == n ] &> /dev/null
                then
                        echo "Aborting"
                fi
        fi
                ;;
	cc)
		echo "Clean all packages cache? [y/n]"
		read inputv2
		if [ $inputv2 == y ] &> /dev/null
		then
			cd ${DIR}
			rm -rf $(ls -I gitpool -I ignore -I reg -I updall -I updchk)
		else
			echo "Try next time"
			exit 2
		fi
		;;
	s)
        search_packages() {
        declare -a aur=("${!1}")
        CURL_JSN=$(curl -s $(echo "https://aur.archlinux.org/rpc/?v=5&type=search&by=name-desc&arg=""${aur[@]}" | sed -e 's/ /+/g'))
        OUT_STR=$(jq -r '.results | .[] | [.Name, .Version], .Description' <<< ${CURL_JSN})
        SEARCH_OUT=$(sed -e 's/\\//g' -e 's/\[/\\033\[0\;36m\[/g' -e 's/",/\\033\[0m", \[\\033\[0\;32m/g' \
        -e 's/\]/\\033\[0\m\]\\033\[1\m\]/g' <<< ${OUT_STR})
        if [ "${OUT_STR}" == '' ]; then echo -e "\033[0;31mNo packages found.\033[0m"; exit 1; fi
        echo -ne "\033[1;33mSearch results:\033[0m"
        echo -e ${SEARCH_OUT} | sed -e 's/\[ /\n/g' -e 's/ *\] /\n\t/g' -e 's/", / /g' -e 's/"//g'
        }
                if [ -z "$2" ]
        then
                echo "Write what you need to search"
                exit 1
        else
                N=2
                while [ "${!N}" != '' ]; do
                        keywords[$((N-2))]=${!N}
                        let N=N+1
                done
                search_packages keywords[@]
        fi
		;;
	g)
		if [ -z "$2" ]; then echo "Write what you need to ignore"; exit 1; fi
		for PKG in ${@:2}
		do
		if [ -f "${IGN}/${PKG}" ]
	then
		echo -e "\033[0;33m[!] \033[0mYou already have ${PKG} at ignore list"
	else
		if [ -z "$(pacman -Qsq | grep -x ${PKG})" ]; then
		echo -e "\033[0;31m[X] \033[0mYou doesn't have ${PKG} package"
	else
		touch ${IGN}/${PKG}
		echo -e "\033[0;32m[✓] \033[0m${PKG} added to ignore list"
fi
		fi
		done
		;;
	ug)
		if [ -z "$2" ]; then echo "Write what you need to unignore"; exit 1; fi
		for PKG in ${@:2}
		do
		if [ -f "${IGN}/${PKG}" ]
	then
		rm ${IGN}/${PKG}
		echo -e "\033[0;32m[✓] \033[0m${PKG} unignored"
	else
		echo -e "\033[0;31m[X] \033[0mYou doesn't have ${PKG} at ignore list"
		fi
		done
		;;
	u)
		chlock
		tlock
		if [ -f ${DIR}/.info ]; then cat /dev/null > ${DIR}/.info; else touch ${DIR}/.info; fi
		if [ -f ${DIR}/.sakurisakuriinfo ]; then rm ${DIR}/.sakurisakuriinfo; fi
		if [ -n "$(ls -A ${UPDALL})" ]; then rm -rf ${UPDALL}/* ; fi
                ffile="${DIR}/.info"
                if [ -z "$(pacman -Qmq)" ]; then echo "There is nothing to do."; rmlock; exit 1; fi
                cd ${UPDALL}
		touch $(pacman -Qmq)
		if [ -n "$(ls ${IGN})" ]; then
		rm -f $(ls ${IGN}); fi
		echo Exploring updates...
		echo "----------------"
                for D in ./*
                do
                        D=${D%*/}
                        rm -rf $D
			echo "checking ${D##*/}..."
			if [ -f ${DIR}/.tmptmptmpsakuri ]; then rm ${DIR}/.tmptmptmpsakuri; else touch ${DIR}/.tmptmptmpsakuri; fi
                        git clone https://aur.archlinux.org/${D##*/}.git > ${DIR}/.tmptmptmpsakuri 2>&1
			if cat ${DIR}/.tmptmptmpsakuri | grep "Could not resolve host" &> /dev/null
			then
				echo -e "\033[0;31mIt seems like you doesn't have internet connection.\033[0m"
				if [ -f ${DIR}/.infouser111 ]; then rm ${DIR}/.infouser111; fi
				cat /dev/null > ${DIR}/.info
				rm ${DIR}/.tmptmptmpsakuri
				rmlock
				exit 3
			else
			if cat ${DIR}/.tmptmptmpsakuri | grep warning &> /dev/null
			then
				echo -e "\033[0;31mIt seems like repository of ${D##*/} package not found. Try to check it on AUR, or add it to ignore list for get rid of this message.\033[0m"
				if [ -f ${DIR}/.infouser111 ]; then rm ${DIR}/.infouser111; fi
				cat /dev/null > ${DIR}/.info
				rm ${DIR}/.tmptmptmpsakuri
				rmlock
				exit 3
			fi
			fi
                        cd $D
			source PKGBUILD
			if [ -n "$epoch" ]; then
                        APP1=${epoch}:${pkgver}-${pkgrel}
		else
			APP1=${pkgver}-${pkgrel}
			fi
			unset pkgver pkgrel epoch
                        APP2=$(pacman -Q ${D##*/} | awk '{print $2;}') 
                        if [ $APP1 == $APP2 ]
                        then
                                true
                        else
                                echo "${D} > ${APP1}" | cut -c3-100 >> ${DIR}/.infouser111
				echo "${D}" | cut -c3-100 >> ${DIR}/.info
                        fi
			rm ${DIR}/.tmptmptmpsakuri
                done
                        #echo "----------------"
                        cd ~
                        if [ -z "$(cat ${ffile})" ]
                        then
				echo "-----------------"
                                echo "Nothing to update"
				rm -rf ${UPDALL}/*
				rmlock
                                exit 1
                        fi
			echo "---------------"
			cat ${DIR}/.infouser111
			rm ${DIR}/.infouser111
                        rm -rf ${UPDALL}/*
			echo "Proceed with installation? [y/n]"
			read superq
			if [ $superq == y ] &> /dev/null
			then
			sort -u ${DIR}/.info > ${DIR}/.infosort
			rm ${DIR}/.info
			mv ${DIR}/.infosort ${DIR}/.info
			else
			cat /dev/null > ${DIR}/.info
			rmlock
			exit 2
			fi
			echo Upgrading...
			if [ -f ${DIR}/.sakurisakurierror ]; then rm ${DIR}/.sakurisakurierror; fi
			sleep 1
			for F in $(cat ${DIR}/.info)
			do
				sakuri --back-i-- $F
				if [ -f ${DIR}/.uu7 ]; then
				echo "$F" >> ${DIR}/.sakurisakurierror
				rm ${DIR}/.uu7
				fi
			done
			if [ -f ${DIR}/.sakurisakurierror ]; then
				for G in $(cat ${DIR}/.sakurisakurierror)
				do
					sakuri --back-ia-- $G
				done
				else
					true
				fi
			cat /dev/null > ${DIR}/.info	
			if [ -f ${DIR}/.sakurisakurierror ]; then rm ${DIR}/.sakurisakurierror; fi
			rmlock
                ;;
	gl)
		ls ${IGN}
		;;
	dbremove)
		rm -f ${DIR}/.db.lock
		;;
	say)
	echo "
              _______________
	     <Yaourt is dead.>
	      ---------------
	           \\
		    \\
		      ^__^
		      (oo)\\______
		      (__)\\|     )\\/\\
		           ||---w)
			   ||   ||"
		;; 
        w|-h|--help)
		echo -e "Hi! Welcome to Sakuri. This is a simple bash script that may help you to control your AUR packages. Current version : \033[0;32m2.1.8\033[0m
Here's a tips:
	sakuri i (names of aur packages) for install package(s).
	sakuri ia (names of aur packages) for installing package(s) from cache.
	sakuri r (names of aur packages) for remove a package(s).
	sakuri ch (names of aur packages) for check package(s) for updates.
	sakuri cha for check all packages for updates.
	sakuri c for cleaning all sakuri data.
	sakuri cc for cleaning all sakuri packages cache data.
	sakuri l for watch manually (AUR) installed packages.
	sakuri w for this welcome message.
	sakuri s (name of aur package) for search. (thanks to Seppia (repofish))
	sakuri g (names of aur packages) for ignore package(s) for checking updates.
	sakuri ug (names of aur packages) for removing package(s) from ignore list.
	sakuri gl for watch on ignored packages.
	sakuri u for updating all AUR packages.
		I hope I helped you with organaizing your AUR apps. Thanks for using!
\033[0;31mmade by Artemii Sudakov (t.me/heveat)\033[0m"
		;;
        *)
		echo -e "Uknown argument. Try \033[0;33msakuri w\033[0m for help."
		;;
esac
